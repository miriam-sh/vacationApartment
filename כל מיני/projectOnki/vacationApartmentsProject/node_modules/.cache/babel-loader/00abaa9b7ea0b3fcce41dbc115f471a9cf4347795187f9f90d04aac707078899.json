{"ast":null,"code":"var _jsxFileName = \"D:\\\\Node\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8 \\u05D4\\u05E9\\u05DB\\u05E8\\u05EA \\u05D3\\u05D9\\u05E8\\u05D5\\u05EA\\\\vacationApartmentsProject\\\\src\\\\VacationApartment\\\\Components\\\\Aaa.jsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport default function FreeSoloCreateOptionDialog({\n  cities\n}) {\n  _s();\n  const [top100Films, setTop100Films] = React.useState([]);\n  cities.map(c => {\n    if (!top100Films.includes(c)) setTop100Films([...top100Films, c]);\n  });\n  const [value, setValue] = React.useState(null);\n  const save = newValue => {\n    setTop100Films([...top100Films, {\n      name: newValue.inputValue,\n      _id: -1\n    }]);\n    setValue(newValue.inputValue);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      onChange: (event, newValue) => {\n        if (typeof newValue === 'string') {\n          setTimeout(() => {\n            save(newValue);\n          });\n        } else if (newValue && newValue.inputValue) {\n          save(newValue);\n        } else {\n          setValue(newValue);\n        }\n      },\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n        if (params.inputValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            name: `הוספת ${params.inputValue} לרשימה`\n          });\n        }\n        return filtered;\n      },\n      id: \"free-solo-dialog-demo\",\n      options: top100Films,\n      getOptionLabel: option => {\n        if (typeof option === 'string') {\n          return option;\n        }\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        return option.name;\n      },\n      selectOnFocus: true,\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      renderOption: (props, option) => {\n        const {\n          key,\n          ...optionProps\n        } = props;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          ...optionProps,\n          children: option.name\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this);\n      },\n      sx: {\n        width: 300\n      },\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Free solo dialog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(FreeSoloCreateOptionDialog, \"9DZ11RhGH9YOWJkyvHtlLRkP+zg=\");\n_c = FreeSoloCreateOptionDialog;\nvar _c;\n$RefreshReg$(_c, \"FreeSoloCreateOptionDialog\");","map":{"version":3,"names":["React","TextField","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","Autocomplete","createFilterOptions","jsxDEV","_jsxDEV","Fragment","_Fragment","filter","FreeSoloCreateOptionDialog","cities","_s","top100Films","setTop100Films","useState","map","c","includes","value","setValue","save","newValue","name","inputValue","_id","children","onChange","event","setTimeout","filterOptions","options","params","filtered","push","id","getOptionLabel","option","selectOnFocus","clearOnBlur","handleHomeEndKeys","renderOption","props","key","optionProps","fileName","_jsxFileName","lineNumber","columnNumber","sx","width","freeSolo","renderInput","label","_c","$RefreshReg$"],"sources":["D:/Node/פרוייקט השכרת דירות/vacationApartmentsProject/src/VacationApartment/Components/Aaa.jsx"],"sourcesContent":["import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport default function FreeSoloCreateOptionDialog({ cities }) {\r\n\r\n    const [top100Films, setTop100Films] = React.useState(\r\n        []\r\n    );\r\n\r\n    cities.map((c) => {\r\n        if (!top100Films.includes(c))\r\n            setTop100Films([...top100Films, c])\r\n    })\r\n\r\n    const [value, setValue] = React.useState(null);\r\n\r\n\r\n    const save = (newValue) => {\r\n        setTop100Films([...top100Films, { name: newValue.inputValue, _id: -1 }])\r\n        setValue(newValue.inputValue);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Autocomplete\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    if (typeof newValue === 'string') {\r\n                        setTimeout(() => {\r\n                            save(newValue)\r\n                        });\r\n                    } else if (newValue && newValue.inputValue) {\r\n                        save(newValue)\r\n                    } else {\r\n                        setValue(newValue);\r\n                    }\r\n                }}\r\n                filterOptions={(options, params) => {\r\n                    const filtered = filter(options, params);\r\n\r\n                    if (params.inputValue !== '') {\r\n                        filtered.push({\r\n                            inputValue: params.inputValue,\r\n                            name: `הוספת ${params.inputValue} לרשימה`,\r\n                        });\r\n                    }\r\n\r\n                    return filtered;\r\n                }}\r\n                id=\"free-solo-dialog-demo\"\r\n                options={top100Films}\r\n                getOptionLabel={(option) => {\r\n                    if (typeof option === 'string') {\r\n                        return option;\r\n                    }\r\n                    if (option.inputValue) {\r\n                        return option.inputValue;\r\n                    }\r\n                    return option.name;\r\n                }}\r\n                selectOnFocus\r\n                clearOnBlur\r\n                handleHomeEndKeys\r\n                renderOption={(props, option) => {\r\n                    const { key, ...optionProps } = props;\r\n                    return (\r\n                        <li key={key} {...optionProps}>\r\n                            {option.name}\r\n                        </li>\r\n                    );\r\n                }}\r\n                sx={{ width: 300 }}\r\n                freeSolo\r\n                renderInput={(params) => <TextField {...params} label=\"Free solo dialog\" />}\r\n            ></Autocomplete>\r\n        </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}