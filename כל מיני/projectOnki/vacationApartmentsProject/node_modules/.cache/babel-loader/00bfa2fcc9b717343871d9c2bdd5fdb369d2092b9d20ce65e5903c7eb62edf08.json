{"ast":null,"code":"var _jsxFileName = \"D:\\\\Node\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8 \\u05D4\\u05E9\\u05DB\\u05E8\\u05EA \\u05D3\\u05D9\\u05E8\\u05D5\\u05EA\\\\vacationApartmentsProject\\\\src\\\\VacationApartment\\\\Components\\\\Aaa.jsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport default function FreeSoloCreateOptionDialog({\n  cities\n}) {\n  _s();\n  console.log(cities[0]);\n  const [top100Films, setTop100Films] = React.useState(\n  // [\n  //     { name: 'The Shawshank Redemption', year: 1994 },\n  //     { name: 'The Godfather', year: 1972 },\n  //     { name: 'The Godfather: Part II', year: 1974 },\n  //     { name: 'The Dark Knight', year: 2008 }\n  // ]\n  []);\n  use;\n  const [value, setValue] = React.useState(null);\n  const [open, toggleOpen] = React.useState(false);\n  const [dialogValue, setDialogValue] = React.useState({\n    title: '',\n    year: ''\n  });\n  const handleClose = () => {\n    setDialogValue({\n      title: '',\n      year: ''\n    });\n    toggleOpen(false);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    setValue({\n      title: dialogValue.title,\n      year: parseInt(dialogValue.year, 10)\n    });\n    handleClose();\n  };\n  const save = newValue => {\n    alert(newValue);\n    setTop100Films([...top100Films, {\n      title: newValue,\n      year: 1994\n    }]);\n    setValue(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      onChange: (event, newValue) => {\n        if (typeof newValue === 'string') {\n          // timeout to avoid instant validation of the dialog's form.\n          setTimeout(() => {\n            // toggleOpen(true);\n            // setDialogValue({\n            //     title: newValue,\n            //     year: '',\n            // });\n            save(newValue);\n          });\n        } else if (newValue && newValue.inputValue) {\n          // toggleOpen(true);\n          // setDialogValue({\n          //     title: newValue.inputValue,\n          //     year: '',\n          // });\n          save(newValue);\n        } else {\n          setValue(newValue);\n        }\n      },\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n        if (params.inputValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            name: `הוספת ${params.inputValue} לרשימה`\n          });\n        }\n        return filtered;\n      },\n      id: \"free-solo-dialog-demo\",\n      options: top100Films,\n      getOptionLabel: option => {\n        // for example value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        return option.name;\n      },\n      selectOnFocus: true,\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      renderOption: (props, option) => {\n        const {\n          key,\n          ...optionProps\n        } = props;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          ...optionProps,\n          children: option.name\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this);\n      },\n      sx: {\n        width: 300\n      },\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Free solo dialog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(FreeSoloCreateOptionDialog, \"N7zpYdalEUaJuv1eCdZn4W5W5rA=\");\n_c = FreeSoloCreateOptionDialog;\nvar _c;\n$RefreshReg$(_c, \"FreeSoloCreateOptionDialog\");","map":{"version":3,"names":["React","TextField","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","Autocomplete","createFilterOptions","jsxDEV","_jsxDEV","Fragment","_Fragment","filter","FreeSoloCreateOptionDialog","cities","_s","console","log","top100Films","setTop100Films","useState","use","value","setValue","open","toggleOpen","dialogValue","setDialogValue","title","year","handleClose","handleSubmit","event","preventDefault","parseInt","save","newValue","alert","children","onChange","setTimeout","inputValue","filterOptions","options","params","filtered","push","name","id","getOptionLabel","option","selectOnFocus","clearOnBlur","handleHomeEndKeys","renderOption","props","key","optionProps","fileName","_jsxFileName","lineNumber","columnNumber","sx","width","freeSolo","renderInput","label","_c","$RefreshReg$"],"sources":["D:/Node/פרוייקט השכרת דירות/vacationApartmentsProject/src/VacationApartment/Components/Aaa.jsx"],"sourcesContent":["import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport default function FreeSoloCreateOptionDialog({ cities }) {\r\n\r\n    console.log(cities[0]);\r\n\r\n    const [top100Films, setTop100Films] = React.useState(\r\n        // [\r\n        //     { name: 'The Shawshank Redemption', year: 1994 },\r\n        //     { name: 'The Godfather', year: 1972 },\r\n        //     { name: 'The Godfather: Part II', year: 1974 },\r\n        //     { name: 'The Dark Knight', year: 2008 }\r\n        // ]\r\n        []\r\n    );\r\n\r\n    use\r\n\r\n\r\n    const [value, setValue] = React.useState(null);\r\n    const [open, toggleOpen] = React.useState(false);\r\n    const [dialogValue, setDialogValue] = React.useState({\r\n        title: '',\r\n        year: '',\r\n    });\r\n\r\n    const handleClose = () => {\r\n        setDialogValue({\r\n            title: '',\r\n            year: '',\r\n        });\r\n        toggleOpen(false);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        setValue({\r\n            title: dialogValue.title,\r\n            year: parseInt(dialogValue.year, 10),\r\n        });\r\n        handleClose();\r\n    };\r\n\r\n    const save = (newValue) => {\r\n        alert(newValue);\r\n        setTop100Films([...top100Films, { title: newValue, year: 1994 }])\r\n        setValue(newValue);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Autocomplete\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    if (typeof newValue === 'string') {\r\n                        // timeout to avoid instant validation of the dialog's form.\r\n                        setTimeout(() => {\r\n                            // toggleOpen(true);\r\n                            // setDialogValue({\r\n                            //     title: newValue,\r\n                            //     year: '',\r\n                            // });\r\n                            save(newValue)\r\n                        });\r\n                    } else if (newValue && newValue.inputValue) {\r\n                        // toggleOpen(true);\r\n                        // setDialogValue({\r\n                        //     title: newValue.inputValue,\r\n                        //     year: '',\r\n                        // });\r\n                        save(newValue)\r\n                    } else {\r\n                        setValue(newValue);\r\n                    }\r\n                }}\r\n                filterOptions={(options, params) => {\r\n                    const filtered = filter(options, params);\r\n\r\n                    if (params.inputValue !== '') {\r\n                        filtered.push({\r\n                            inputValue: params.inputValue,\r\n                            name: `הוספת ${params.inputValue} לרשימה`,\r\n                        });\r\n                    }\r\n\r\n                    return filtered;\r\n                }}\r\n                id=\"free-solo-dialog-demo\"\r\n                options={top100Films}\r\n                getOptionLabel={(option) => {\r\n                    // for example value selected with enter, right from the input\r\n                    if (typeof option === 'string') {\r\n                        return option;\r\n                    }\r\n                    if (option.inputValue) {\r\n                        return option.inputValue;\r\n                    }\r\n                    return option.name;\r\n                }}\r\n                selectOnFocus\r\n                clearOnBlur\r\n                handleHomeEndKeys\r\n                renderOption={(props, option) => {\r\n                    const { key, ...optionProps } = props;\r\n                    return (\r\n                        <li key={key} {...optionProps}>\r\n                            {option.name}\r\n                        </li>\r\n                    );\r\n                }}\r\n                sx={{ width: 300 }}\r\n                freeSolo\r\n                renderInput={(params) => <TextField {...params} label=\"Free solo dialog\" />}\r\n            />\r\n            {/* <Dialog open={open} onClose={handleClose}>\r\n                <form onSubmit={handleSubmit}>\r\n                    <DialogTitle>Add a new film</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Did you miss any film in our list? Please, add it!\r\n                        </DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            value={dialogValue.title}\r\n                            onChange={(event) =>\r\n                                setDialogValue({\r\n                                    ...dialogValue,\r\n                                    title: event.target.value,\r\n                                })\r\n                            }\r\n                            label=\"title\"\r\n                            type=\"text\"\r\n                            variant=\"standard\"\r\n                        />\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            value={dialogValue.year}\r\n                            onChange={(event) =>\r\n                                setDialogValue({\r\n                                    ...dialogValue,\r\n                                    year: event.target.value,\r\n                                })\r\n                            }\r\n                            label=\"year\"\r\n                            type=\"number\"\r\n                            variant=\"standard\"\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose}>Cancel</Button>\r\n                        <Button type=\"submit\">Add</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog> */}\r\n        </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}