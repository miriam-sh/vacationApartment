{"ast":null,"code":"import { produce } from 'immer';\nimport { Data } from './Data';\nexport const Reducer = produce(_c = (state, action) => {\n  switch (action.type) {\n    case 'ADD_USER':\n      state.Users.push(action.payload);\n      break;\n    case 'ADD_CAR':\n      state.Cars.push(action.payload);\n      break;\n    case 'ADD_LEND':\n      state.Lends.push(action.payload);\n      break;\n    case 'ADD_MODEL':\n      state.CarModels.push(action.payload);\n      break;\n    case 'ADD_MODEL':\n      state.CarModels.push(action.payload);\n      break;\n    case 'UPDATE_CAR_AVAILABLE':\n      let carIndex = state.Cars.findIndex(p => p.id == action.payload.id);\n      state.Cars[carIndex].available = action.payload.available;\n      break;\n    case 'UPDATE_CAR':\n      let carIndex1 = state.Cars.findIndex(p => p.id == action.payload.id);\n      state.Cars[carIndex1] = action.payload.car;\n      // state.Cars.splice(carIndex, 1);\n      // state.Cars.push(action.payload.car)\n      break;\n    case 'REMOVE_CAR':\n      let carIndex2 = state.Cars.findIndex(p => p.id == action.payload);\n      state.Cars.splice(carIndex2, 1);\n      break;\n    case 'REMOVE_DRIVE_TYPE':\n      let driveType = state.DriveTypes.findIndex(p => p.id == action.payload);\n      state.DriveTypes.splice(driveType, 1);\n      break;\n    case 'UPDATE_DRIVE_TYPE_PRICE':\n      let driveType2 = state.DriveTypes.find(p => p.id == action.payload.id);\n      driveType2.pricePerLiter = action.payload.newPrice;\n      break;\n    case 'SET_CURRENT_USER':\n      state.CurrentUser = action.payload;\n      sessionStorage.setItem(\"currentUser\", JSON.stringify(action.payload));\n      break;\n    default:\n      break;\n  }\n}, Data);\n_c2 = Reducer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Reducer$produce\");\n$RefreshReg$(_c2, \"Reducer\");","map":{"version":3,"names":["produce","Data","Reducer","_c","state","action","type","Users","push","payload","Cars","Lends","CarModels","carIndex","findIndex","p","id","available","carIndex1","car","carIndex2","splice","driveType","DriveTypes","driveType2","find","pricePerLiter","newPrice","CurrentUser","sessionStorage","setItem","JSON","stringify","_c2","$RefreshReg$"],"sources":["D:/react/home-works-and-lessons/src/RentalCar/redux/Reducer.js"],"sourcesContent":["import { produce } from 'immer';\r\nimport { Data } from './Data';\r\n\r\nexport const Reducer = produce((state, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD_USER':\r\n            state.Users.push(action.payload)\r\n            break;\r\n        case 'ADD_CAR':\r\n            state.Cars.push(action.payload)\r\n            break;\r\n        case 'ADD_LEND':\r\n            state.Lends.push(action.payload)\r\n            break;\r\n        case 'ADD_MODEL':\r\n            state.CarModels.push(action.payload)\r\n            break;\r\n        case 'ADD_MODEL':\r\n            state.CarModels.push(action.payload)\r\n            break;\r\n        case 'UPDATE_CAR_AVAILABLE':\r\n            let carIndex = state.Cars.findIndex(p => p.id == action.payload.id)\r\n            state.Cars[carIndex].available=action.payload.available\r\n            break;\r\n        case 'UPDATE_CAR':\r\n            let carIndex1 = state.Cars.findIndex(p => p.id == action.payload.id)\r\n            state.Cars[carIndex1] = action.payload.car\r\n            // state.Cars.splice(carIndex, 1);\r\n            // state.Cars.push(action.payload.car)\r\n            break;\r\n        case 'REMOVE_CAR':\r\n            let carIndex2 = state.Cars.findIndex(p => p.id == action.payload)\r\n            state.Cars.splice(carIndex2, 1);\r\n            break\r\n        case 'REMOVE_DRIVE_TYPE':\r\n            let driveType = state.DriveTypes.findIndex(p => p.id == action.payload)\r\n            state.DriveTypes.splice(driveType, 1);\r\n            break\r\n        case 'UPDATE_DRIVE_TYPE_PRICE':\r\n            let driveType2 = state.DriveTypes.find(p => p.id == action.payload.id)\r\n            driveType2.pricePerLiter = action.payload.newPrice\r\n            break;\r\n        case 'SET_CURRENT_USER':\r\n            state.CurrentUser = action.payload\r\n            sessionStorage.setItem(\"currentUser\", JSON.stringify(action.payload))\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n}, Data)"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,IAAI,QAAQ,QAAQ;AAE7B,OAAO,MAAMC,OAAO,GAAGF,OAAO,CAAAG,EAAA,GAACA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAE9C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,UAAU;MACXF,KAAK,CAACG,KAAK,CAACC,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC;MAChC;IACJ,KAAK,SAAS;MACVL,KAAK,CAACM,IAAI,CAACF,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC;MAC/B;IACJ,KAAK,UAAU;MACXL,KAAK,CAACO,KAAK,CAACH,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC;MAChC;IACJ,KAAK,WAAW;MACZL,KAAK,CAACQ,SAAS,CAACJ,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC;MACpC;IACJ,KAAK,WAAW;MACZL,KAAK,CAACQ,SAAS,CAACJ,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC;MACpC;IACJ,KAAK,sBAAsB;MACvB,IAAII,QAAQ,GAAGT,KAAK,CAACM,IAAI,CAACI,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,IAAIX,MAAM,CAACI,OAAO,CAACO,EAAE,CAAC;MACnEZ,KAAK,CAACM,IAAI,CAACG,QAAQ,CAAC,CAACI,SAAS,GAACZ,MAAM,CAACI,OAAO,CAACQ,SAAS;MACvD;IACJ,KAAK,YAAY;MACb,IAAIC,SAAS,GAAGd,KAAK,CAACM,IAAI,CAACI,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,IAAIX,MAAM,CAACI,OAAO,CAACO,EAAE,CAAC;MACpEZ,KAAK,CAACM,IAAI,CAACQ,SAAS,CAAC,GAAGb,MAAM,CAACI,OAAO,CAACU,GAAG;MAC1C;MACA;MACA;IACJ,KAAK,YAAY;MACb,IAAIC,SAAS,GAAGhB,KAAK,CAACM,IAAI,CAACI,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,IAAIX,MAAM,CAACI,OAAO,CAAC;MACjEL,KAAK,CAACM,IAAI,CAACW,MAAM,CAACD,SAAS,EAAE,CAAC,CAAC;MAC/B;IACJ,KAAK,mBAAmB;MACpB,IAAIE,SAAS,GAAGlB,KAAK,CAACmB,UAAU,CAACT,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,IAAIX,MAAM,CAACI,OAAO,CAAC;MACvEL,KAAK,CAACmB,UAAU,CAACF,MAAM,CAACC,SAAS,EAAE,CAAC,CAAC;MACrC;IACJ,KAAK,yBAAyB;MAC1B,IAAIE,UAAU,GAAGpB,KAAK,CAACmB,UAAU,CAACE,IAAI,CAACV,CAAC,IAAIA,CAAC,CAACC,EAAE,IAAIX,MAAM,CAACI,OAAO,CAACO,EAAE,CAAC;MACtEQ,UAAU,CAACE,aAAa,GAAGrB,MAAM,CAACI,OAAO,CAACkB,QAAQ;MAClD;IACJ,KAAK,kBAAkB;MACnBvB,KAAK,CAACwB,WAAW,GAAGvB,MAAM,CAACI,OAAO;MAClCoB,cAAc,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC3B,MAAM,CAACI,OAAO,CAAC,CAAC;MACrE;IACJ;MACI;EACR;AAEJ,CAAC,EAAER,IAAI,CAAC;AAAAgC,GAAA,GAhDK/B,OAAO;AAAA,IAAAC,EAAA,EAAA8B,GAAA;AAAAC,YAAA,CAAA/B,EAAA;AAAA+B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}